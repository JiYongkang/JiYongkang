<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MVideo影视自动采集系统</title>
      <link href="/2019/09/07/Mvideo/"/>
      <url>/2019/09/07/Mvideo/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MVideo影视自动采集系统是一款在线采集播放影视的程序程序为PHP编写,ajax读取数据</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>1.自动采集影视资源<br>2.在线播放功能<br>3.搜索全网资源功能<br>4.无需数据库</p><p>首页和播放页屏蔽了两个分区内容：伦理片 福利区<br>可在URL后加password.html 输入密码进行解锁一个小时</p><p>对接资源站点：zuida.me 做到实时更新<br>推荐配置：Nginx+PHP7.1</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>项目地址: <a href="https://github.com/JiYongkang/MVideo" target="_blank" rel="noopener">https://github.com/JiYongkang/MVideo</a><br>演示站点: <a href="http://k.bistros.cn" target="_blank" rel="noopener">http://k.bistros.cn</a></p><p><img src="/images/mv1.png" alt="image"><br><img src="/images/mv2.png" alt="image">  </p><h2 id="伪静态配置规则"><a href="#伪静态配置规则" class="headerlink" title="伪静态配置规则"></a>伪静态配置规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Nginx</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">rewrite ^/list/?([0-9]+)?/?$ /index.php?id=$1;</span><br><span class="line">rewrite ^/play/?([0-9]+)?/?$ /lib/play.php?id=$1;</span><br><span class="line">rewrite ^/search/([^/]+)/?$ /lib/search.php?key=$1;</span><br><span class="line">rewrite ^/zhibo.html /lib/zhibo.php;</span><br><span class="line">rewrite ^/password.html /lib/password.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Apache</span><br><span class="line"></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteRule ^list/?([0-9]+)?/?$ index.php?id=$1</span><br><span class="line">RewriteRule ^play/?([0-9]+)?/?$ lib/play.php?id=$1</span><br><span class="line">RewriteRule ^search/([^/]+)/?$ lib/search.php?key=$1</span><br><span class="line">RewriteRule ^zhibo.html lib/zhibo.php</span><br><span class="line">RewriteRule ^password.html lib/password.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes的DaemonSet控制器</title>
      <link href="/2019/07/25/DaemonSet%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2019/07/25/DaemonSet%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="DaemonSet控制器简介"><a href="#DaemonSet控制器简介" class="headerlink" title="DaemonSet控制器简介"></a>DaemonSet控制器简介</h2><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除的 DaemonSet 将会删除它创建的所有 Pod。</p><p>使用 DaemonSet 的一些典型用法：</p><ul><li>运行集群存储 daemon，例如在每个 Node 上运行 glusterd、ceph。</li><li>在每个 Node 上运行日志收集 daemon，例如fluentd、logstash。</li><li>在每个 Node 上运行监控 daemon，例如 Prometheus Node Exporter、collectd、Datadog 代理、New Relic 代理，或 Ganglia gmond。  </li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>启动一个redis配置一下filebeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: logstor</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: logstor</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis</span><br><span class="line">        image: redis:4.0-alpine</span><br><span class="line">        ports:</span><br><span class="line">        - name: redis</span><br><span class="line">          containerPort: 6379</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: filebeat-ds</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: filebeat</span><br><span class="line">      release: stable</span><br><span class="line">  template:</span><br><span class="line">      metadata:</span><br><span class="line">        labels:</span><br><span class="line">          app: filebeat</span><br><span class="line">          release: stable</span><br><span class="line">  spec:</span><br><span class="line">    containers:</span><br><span class="line">    - name: filebeat</span><br><span class="line">      image: ikubernetes/filebeat:5.6.5-alpine</span><br><span class="line">      env:</span><br><span class="line">      - name: REDIS_HOST</span><br><span class="line">        value: redis.default.svc.cluster.local</span><br><span class="line">      - name: REDIS_LOG_LEVEL</span><br><span class="line">        value: info</span><br></pre></td></tr></table></figure><p>创建Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master pod_yaml]# kubectl apply -f ds-demo.yaml</span><br><span class="line">deployment.apps/redis created</span><br><span class="line">daemonset.apps/filebeat-ds created</span><br><span class="line">[root@master pod_yaml]# kubectl get pods</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">filebeat-ds-fshpf        1/1     Running   0          112s</span><br><span class="line">filebeat-ds-xlxjl        1/1     Running   0          112s</span><br><span class="line">redis-5c998b644f-glr5j   1/1     Running   0          112s</span><br><span class="line">[root@master pod_yaml]# kubectl expose deployment redis --port=6379       //公开6379端口</span><br><span class="line">service/redis exposed</span><br><span class="line">[root@master pod_yaml]# kubectl get svc       //有个redis的service，端口6379</span><br><span class="line">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP    17d</span><br><span class="line">redis        ClusterIP   10.96.157.28   &lt;none&gt;        6379/TCP   6s</span><br></pre></td></tr></table></figure><p>查看服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get ds         //只有两个节点</span><br><span class="line">NAME          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">filebeat-ds   2         2         2       2            2           &lt;none&gt;          2m38s</span><br><span class="line">[root@master ~]# kubectl get pods -o wide    //可以看到每个节点有一个filebeat-ds</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">filebeat-ds-dpgdm        1/1     Running   0          2m58s   10.244.2.14   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">filebeat-ds-kx9mz        1/1     Running   0          2m58s   10.244.1.12   node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-5c998b644f-wqbnm   1/1     Running   0          2m58s   10.244.2.13   node2   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">因为没有日志所以进入交互式模式手动创建</span><br><span class="line">[root@master ~]# kubectl exec -it filebeat-ds-dpgdm -- /bin/sh     </span><br><span class="line">/ # echo &quot;aaaaaa&quot; &gt; /var/log/containers/filebeat.log</span><br><span class="line">/ # exit</span><br><span class="line">进去radis查看</span><br><span class="line">[root@master ~]# kubectl exec -it redis-5c998b644f-wqbnm -- /bin/sh   </span><br><span class="line">/data # redis-cli -h redis.default.svc.cluster.local</span><br><span class="line">redis.default.svc.cluster.local:6379&gt; KEYS *</span><br><span class="line">1) &quot;filebeat&quot;</span><br></pre></td></tr></table></figure><h2 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h2><p>详细查看<code>kubectl explain ds.spec.updateStrategy</code><br>默认是 rollingUpdate 是删除式更新<br>rollingUpdate 只支持 maxUnavailable，因为ds是每个主机上只能启动一个pod，所以不能有多余节点的启动</p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pod生命周期</title>
      <link href="/2019/07/23/Pod_lc/"/>
      <url>/2019/07/23/Pod_lc/</url>
      
        <content type="html"><![CDATA[<h2 id="Pod简介"><a href="#Pod简介" class="headerlink" title="Pod简介"></a>Pod简介</h2><ul><li>Pod 是 kubernetes 系统的基础单元，是由用户创建或部署的最小组件，也是 kubernetes 系统上运行容器化应用的资源对象。Kubernetes 集群中其他资源对象都是为 pod 这个资源对象做支撑来实现 kubernetes 管理应用服务的目的。Kubernetes 集群组件主要包括主节点组件API Server、Controller Manager、Scheduler 以及子节点组件 kubelet、container Runtime（如docker）、kube-proxy 等。从与集群各组件交互角度讲述 pod 的创建、运行、销毁等生命周期，Pod 生命周期中的几种不同状态包括pending、running、succeeded、failed、Unknown。</li></ul><h2 id="Pod生命周期"><a href="#Pod生命周期" class="headerlink" title="Pod生命周期"></a>Pod生命周期</h2><p><img src="/images/pod_lc.png" alt="Pod"></p><ul><li>除了创建应用容器（主容器及辅助容器之外，注意，如果集群中部署了 istio，则会在 pod 启动的时候注入一个新的和 istio 相关的容器，那是另一个美好故事的开端），还可以为 pod 对象定义其声明周期中的多种行为，如初始化容器、容器探测以及就绪性探测等。</li><li>容器生命周期的几种行为<ul><li>初始化容器初始化容器即 pod 内主容器启动之前要运行的容器，主要是做一些前置工作，初始化容器具有以下特征：<ul><li>初始化容器必须首先执行，若初始化容器运行失败，集群会一直重启初始化容器直至完成，注意，如果 pod 的重启策略为 Never，那初始化容器启动失败后就不会重启。</li><li>初始化容器必须按照定义的顺序执行，初始化容器可以通过 pod 的 spec.initContainers 进行定义。</li></ul></li></ul></li><li>生命周期钩子函数<ul><li>Kubernetes 为容器提供了两种生命周期钩子：<ol><li>Poststart:于容器创建完成之后立即运行的钩子程序。</li><li>preStop:容器终止之前立即运行的程序，是以同步方式的进行，因此其完成之前会阻塞 删除容器的调用<br>备注：钩子程序的执行方式有“Exec”和“HTTP”两种。</li></ol></li></ul></li><li>容器探测<ul><li>容器探测分为存活性探测和就绪性探测容器探测是kubelet对容器健康状态进行诊断，容器探测的方式主要以下三种：<ol><li>ExecAction：在容器中执行命令，根据返回的状态码判断容器健康状态，返回0即表示成功，否则为失败。</li><li>TCPSocketAction: 通过与容器的某TCP端口尝试建立连接进行诊断，端口能打开即为表示成功，否则失败。</li><li>HTTPGetAction：向容器指定 URL 发起 HTTP GET 请求，响应码为2xx或者是3xx为成功，否则失败。</li></ol></li></ul></li><li>Pod终止过程<ul><li>终止过程主要分为如下几个步骤：<ol><li>用户发出删除 pod 命令</li><li>Pod 对象随着时间的推移更新，在宽限期（默认情况下30秒），pod 被视为“dead”状态</li><li>将 pod 标记为“Terminating”状态</li><li>第三步同时运行，监控到 pod 对象为“Terminating”状态的同时启动 pod 关闭过程</li><li>第三步同时进行，endpoints 控制器监控到 pod 对象关闭，将pod与service匹配的 endpoints 列表中删除</li><li>如果 pod 中定义了 preStop 钩子处理程序，则 pod 被标记为“Terminating”状态时以同步的方式启动执行；若宽限期结束后，preStop 仍未执行结束，第二步会重新执行并额外获得一个2秒的小宽限期</li><li>Pod 内对象的容器收到 TERM 信号</li><li>宽限期结束之后，若存在任何一个运行的进程，pod 会收到 SIGKILL 信号</li><li>Kubelet 请求 API Server 将此 Pod 资源宽限期设置为0从而完成删除操作</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes集群搭建</title>
      <link href="/2019/07/08/kubernetes%E5%AE%89%E8%A3%85/"/>
      <url>/2019/07/08/kubernetes%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Kubernetes是什么？"><a href="#Kubernetes是什么？" class="headerlink" title="Kubernetes是什么？"></a>Kubernetes是什么？</h2><ul><li><p>Kubernetes是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。</p></li><li><p>通过Kubernetes你可以：</p><ul><li>快速部署应用</li><li>快速扩展应用</li><li>无缝对接新的应用功能</li><li>节省资源，优化硬件资源的使用</li></ul></li></ul><h2 id="Kubernetes-特点"><a href="#Kubernetes-特点" class="headerlink" title="Kubernetes 特点"></a>Kubernetes 特点</h2><ul><li>可移植: 支持公有云，私有云，混合云，多重云（multi-cloud）</li><li>可扩展: 模块化, 插件化, 可挂载, 可组合</li><li>自动化: 自动部署，自动重启，自动复制，自动伸缩/扩展</li></ul><p>Kubernetes是Google 2014年创建管理的，是Google 10多年大规模容器管理技术Borg的开源版本。</p><h2 id="Kubernetes概述"><a href="#Kubernetes概述" class="headerlink" title="Kubernetes概述"></a>Kubernetes概述</h2><ul><li>随着 Docker 技术的发展和广泛流行，云原生应用和容器调度管理系统也成为 IT 领域大热的词汇。事实上，在 Docker 技术火爆之前，云原生应用的思想已经由云计算技术的领导者和分布式系统架构的推广者广泛传播。例如早在 2011 年 Heroku 的工程师提出了云原生应用的 12 要素，只不过以虚拟机技术作为云原生应用的基础实施。由于虚拟机镜像大、镜像标准不统一以及打包流程和工具不统一，导致了业界无法广泛接受的云原生应用标准，限制了云原生应用的流行。而 Docker 的出现正好解决了这些限制云原生应用构建、交付和运行的瓶颈，使得构建云原生应用成为了使用 Docker 的开发者自然而然的选择。</li><li>Kubernetes 是为生产环境而设计的容器调度管理系统，对于负载均衡、服务发现、高可用、滚动升级、自动伸缩等容器云平台的功能要求有原生支持。由于 Kubernetes 在K和s间有8个字母，因此常简称 k8s。事实上，随着对 k8s 系统架构与设计理念的了解深入，会发现 K8s 系统正是处处为运行云原生应用而设计考虑;同时，随着对 k8s 系统使用的加深和推广，也会有越来越多有关云原生应用的设计模式产生出来，使得基于 k8s 系统设计和开发生产级的复杂云原生应用变得像启动一个单机版容器服务那样简单易用。</li></ul><h2 id="Kubernetes-基本概念和术语"><a href="#Kubernetes-基本概念和术语" class="headerlink" title="Kubernetes 基本概念和术语"></a>Kubernetes 基本概念和术语</h2><ul><li>Kubernetes中的大部分概念如Node、Pod、Replication Controller、Server、Deploymeng、Job、DaemonSet 等都可以看作一种资源对象，几乎所有的资源对象都可以通过 Kubernetes提供的 kubectl 工具执行增、删、改、查等操作，并将其保存在 etcd 中持久化存储。从这个角度来看，Kubernets 其实是一个高度自动化的资源控制系统，它通过跟踪对比 etcd 存储里保存的资源期望状态与当前环境中的实际资源状态的差异来实现自动控制和自动纠错的高级功能。</li><li>Master：<ul><li>Kubernetes 里的 Master 指的是集群控制节点，每个 Kubernetes 集群里需要有一个Master 节点来负责整个集群的管理的控制，基本上 Kubernetes 所有的控制命令进是发给Master，Master 负责具体的执行过程，后面所有执行的命令基本都是在 Master 节点上运行的。Master 节点通常会占据一个独立的 X86 服务器，一个主要的原因是它太重要了，它是整个集群的大脑，如果它宕机或者不可用，那么所有的控制命令都将失效。</li><li>Master 节点上运行着以下一组关键进程：<ul><li>Kube-apiserver：提供了 HTTP Rest 接口的关键服务进程，是 Kubernetes 里所有资源的增、删、改、查等操作的唯一入口，也是集群控制入口进程。</li><li>Kube-controller-manager：是 Kubernetes 里所有资源对象的自动化控制中心，可以理解为资源对象的管家。</li><li>Kube-scheduler：负责资源调度的进程，相当于公交公司的调度室。</li></ul></li></ul></li><li>Node节点：<ul><li>除了 Master、Kubernetes 集群中的其他机器被称为 Node 节点，在较早的版本中也被称为 Minion。与 Master 一样，Node 节点可以是一台物理主机，也可以是一台虚拟机。Node节点才是 Kubernetes 集群中的工作负载节点，每个 Node 都会被 Master 分配一些负载。当某个 Node 宕机时，其上的工作负载会被 Master 自动转移到其他节点上去。</li><li>每个 Node 节点都运行着以下一组关键进程：<ul><li>Kubelet：负责 Pod 对应的容器的创建、启停等任务，同时与 Master 节点密切协作，实现集群管理的基本功能。</li><li>Kube-proxy：实现 Kubernetes Service 的通信与负载均衡机制的重要组件。</li></ul></li></ul></li><li>Pod：<ul><li>是kubernetes最重要也是最基本的概念。每个Pod都会包含一个 “根容器”，还会包含一个或者多个紧密相连的业务容器。</li><li>Kubernetes为每个Pod都分配了唯一的IP地址，称之为PodIP，一个Pod里的多个容器共享PodIP地址。要求底层网络支持集群内任意两个Pod之间的直接通信，通常采用虚拟二层网络技术来实现(Flannel)。</li></ul></li></ul><h2 id="Kubernetes集群部署方案"><a href="#Kubernetes集群部署方案" class="headerlink" title="Kubernetes集群部署方案"></a>Kubernetes集群部署方案</h2><ul><li>1个master + 2个node节点，单节点etcd存储群集实列，网络使用的是flannel，这是kubernetes的默认网络插件</li></ul><p><img src="/images/k8s_1.png" alt="k8s"></p><ul><li>K8s官方下载地址：<a href="https://github.com/kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes</a></li></ul><p><img src="/images/k8s_2.png" alt="k8s"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><table><thead><tr><th style="text-align:center">主机名</th><th style="text-align:center">操作系统</th><th style="text-align:center">内存</th><th>IP地址</th></tr></thead><tbody><tr><td style="text-align:center">master</td><td style="text-align:center">CentOS 7.2</td><td style="text-align:center">4G2核</td><td>192.168.5.201</td></tr><tr><td style="text-align:center">node1</td><td style="text-align:center">CentOS 7.2</td><td style="text-align:center">2G1核</td><td>192.168.5.202</td></tr><tr><td style="text-align:center">node2</td><td style="text-align:center">CentOS 7.2</td><td style="text-align:center">2G1核</td><td>192.168.5.203</td></tr></tbody></table><h2 id="关闭CentOS7自带的防火墙服务"><a href="#关闭CentOS7自带的防火墙服务" class="headerlink" title="关闭CentOS7自带的防火墙服务"></a>关闭CentOS7自带的防火墙服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h2 id="修改三台主机名为master、node1、node2"><a href="#修改三台主机名为master、node1、node2" class="headerlink" title="修改三台主机名为master、node1、node2"></a>修改三台主机名为master、node1、node2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# cat /etc/hostname             //192.168.5.201</span><br><span class="line">master</span><br><span class="line">[root@node1 ~]# cat /etc/hostname              //192.168.5.202</span><br><span class="line">node1</span><br><span class="line">[root@node2 ~]# cat /etc/hostname              //192.168.5.203</span><br><span class="line">node2</span><br></pre></td></tr></table></figure><h2 id="修改hosts文件（在三台服务器上同步）"><a href="#修改hosts文件（在三台服务器上同步）" class="headerlink" title="修改hosts文件（在三台服务器上同步）"></a>修改hosts文件（在三台服务器上同步）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.5.201 master www.k8smaster.com</span><br><span class="line">192.168.5.202 node1 www.node1.com</span><br><span class="line">192.168.5.203 node2 www.node2.com</span><br></pre></td></tr></table></figure><h2 id="时间校对（三台机器都做时间校对）"><a href="#时间校对（三台机器都做时间校对）" class="headerlink" title="时间校对（三台机器都做时间校对）"></a>时间校对（三台机器都做时间校对）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ntpdate ntp1.aliyun.com</span><br><span class="line"> 7 Jul 09:24:07 ntpdate[1225]: adjust time server 120.25.115.20 offset -0.001924 sec</span><br></pre></td></tr></table></figure><h2 id="设置各节点安装程序包"><a href="#设置各节点安装程序包" class="headerlink" title="设置各节点安装程序包"></a>设置各节点安装程序包</h2><ul><li>生成yum仓库配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -P /etc/yum.repos.d/</span><br><span class="line">[root@master ~]# cat /etc/yum.repos.d/k8s.repo</span><br><span class="line">[k8s]</span><br><span class="line">name=k8s</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">enabled=1</span><br><span class="line">[root@master ~]# ls /etc/yum.repos.d/</span><br><span class="line">bak  CentOS-Base.repo  docker-ce.repo  k8s.repo</span><br><span class="line">[root@master ~]# yum repolist</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/k8s_3.png" alt="k8s"></p><ul><li>安装相关的程序包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum -y install docker-ce kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/k8s_4.png" alt="k8s"></p><h2 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h2><ul><li><p>启动dockers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /usr/lib/systemd/system/docker.service       //node节点也需要修改</span><br><span class="line">手动添加一行</span><br><span class="line">ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><p><img src="/images/k8s_5.png" alt="k8s"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> [root@master ~]# systemctl daemon-reload       </span><br><span class="line"> [root@master ~]# systemctl start docker</span><br><span class="line"> [root@master ~]# systemctl enable docker</span><br><span class="line"> [root@master ~]# cat /proc/sys/net/bridge/bridge-nf-call-ip6tables</span><br><span class="line">1</span><br><span class="line">[root@master ~]# cat /proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/sysconfig/kubelet               //node节点也需要修改</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;</span><br><span class="line">[root@master ~]# systemctl enable kubelet</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubeadm config print init-defaults &gt; k8s.conf      //生成初始化文件</span><br><span class="line">[root@master ~]# sed -i &quot;s/kubernetesVersion: .*/kubernetesVersion: v1.15.0/g&quot; k8s.conf      //kubernetes版本</span><br><span class="line">[root@master ~]# sed -i &quot;s/imageRepository: .*/imageRepository: registry.aliyuncs.com\/google_containers/g&quot; k8s.conf        //修改国内的镜像源</span><br><span class="line">[root@master ~]# sed -i &quot;s/advertiseAddress: .*/advertiseAddress: 192.168.5.201/g&quot; k8s.conf     //指向主节点IP</span><br><span class="line">[root@master ~]# vim  k8s.conf         //指向Pod容器的IP段</span><br><span class="line">networking:</span><br><span class="line"> dnsDomain: cluster.local</span><br><span class="line"> podSubnet: 10.244.0.0/16           //在这一段添加podSubnet参数</span><br><span class="line"> serviceSubnet: 10.96.0.0/12</span><br><span class="line">[root@master ~]# kubeadm init --config k8s.conf --ignore-preflight-errors=Swap          //初始化--config指向k8s.conf文件</span><br></pre></td></tr></table></figure><p><img src="/images/k8s_6.png" alt="k8s"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> kubeadm join 192.168.5.201:6443 --token abcdef.0123456789abcdef   --discovery-token-ca-cert-hash sha256:c2534897053d8701a27e76ce1af8347a9013abcc48b0e1b047e4b30b1e02f2d7</span><br><span class="line">初始化完成后出现这条命令保存下来，添加节点的时候要用</span><br><span class="line">[root@master ~]#   mkdir -p $HOME/.kube</span><br><span class="line">[root@master ~]#   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">[root@master ~]#   sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li><li><p>查看集群是否健康</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get cs</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装flannel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]#wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ym</span><br><span class="line">[root@master ~]# kubectl apply -f kube-flannel.yml</span><br><span class="line">[root@master ~]# kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/k8s_7.png" alt="k8s"></p><ul><li>查看状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get node</span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   9m25s   v1.15.0</span><br><span class="line">[root@master ~]# docker images            //master镜像</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/k8s_8.png" alt="k8s"></p><h2 id="添加node节点"><a href="#添加node节点" class="headerlink" title="添加node节点"></a>添加node节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# kubeadm join 192.168.5.201:6443 --token abcdef.0123456789abcdef     --discovery-token-ca-cert-hash sha256:c2534897053d8701a27e76ce1af8347a9013abcc48b0e1b047e4b30b1e02f2d7 --ignore-preflight-errors=Swap  </span><br><span class="line">[root@node2 ~]# kubeadm join 192.168.5.201:6443 --token abcdef.0123456789abcdef     --discovery-token-ca-cert-hash sha256:c2534897053d8701a27e76ce1af8347a9013abcc48b0e1b047e4b30b1e02f2d7 --ignore-preflight-errors=Swap</span><br><span class="line">[root@node1 ~]# docker images     //节点镜像</span><br></pre></td></tr></table></figure><p><img src="/images/k8s_9.png" alt="k8s"></p><h2 id="Master上查看添加的节点"><a href="#Master上查看添加的节点" class="headerlink" title="Master上查看添加的节点"></a>Master上查看添加的节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get node               //可以看到添加的两个node节点</span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   23m     v1.15.0</span><br><span class="line">node1    Ready    &lt;none&gt;   8m49s   v1.15.0</span><br><span class="line">node2    Ready    &lt;none&gt;   8m26s   v1.15.0</span><br><span class="line">[root@master ~]# kubectl get pods -n kube-system -o wide      //查看各个pod都是Running状态</span><br></pre></td></tr></table></figure><p><img src="/images/k8s_10.png" alt="k8s"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客安装部署</title>
      <link href="/2019/06/15/hexo%E5%AE%89%E8%A3%85/"/>
      <url>/2019/06/15/hexo%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上。</p><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ul><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>发布文章</li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum -y install git</span><br><span class="line">[root@master ~]# git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure></p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。这里用的v6.17.1版本的，版本太高会有不兼容问题，自行测试。nodejs官网：<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~] tar xf node-v8.16.0-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@master ~] cd /usr/local/</span><br><span class="line">[root@master local] mv node-v8.16.0-linux-x64/ nodejs</span><br><span class="line">[root@master local] cd nodejs/</span><br><span class="line">[root@master nodejs] ln -s /usr/local/nodejs/bin/node /usr/local/bin/</span><br><span class="line">[root@master nodejs] ln -s /usr/local/nodejs/bin/npm  /usr/local/bin/</span><br><span class="line">[root@master nodejs] node -v</span><br><span class="line">v6.17.1</span><br></pre></td></tr></table></figure></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>前面git和node.js安装好后，就可以安装hexo了，你可以先创建一个文件夹hexo，然后cd到这个文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~] mkdir /usr/local/hexo</span><br><span class="line">[root@master ~] cd /usr/local/hexo</span><br><span class="line">[root@master hexo] npm install -g hexo-cli      ///安装hexo</span><br><span class="line">[root@master hexo] ln -s /usr/local/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/</span><br><span class="line">[root@master hexo] hexo -v</span><br><span class="line">hexo-cli: 1.1.0   ///版本</span><br><span class="line">os: Linux 3.10.0-693.el7.x86_64 linux x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 6.17.1    ///node.js版本</span><br><span class="line">v8: 5.1.281.111</span><br><span class="line">uv: 1.16.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 58.2</span><br><span class="line">modules: 48</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.0.2r</span><br><span class="line">[root@master hexo] hexo init  ///初始化hexo</span><br><span class="line">[root@master hexo] ls   ///会生成一下文件</span><br><span class="line">_config.yml  db.json  node_modules  package.json  public  scaffolds  source  themes</span><br></pre></td></tr></table></figure></p><ul><li>初始化完成后，当前目录下会生成一下文件<ul><li>node_modules：依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml：hexo配置文件</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master hexo]# hexo s   //启动服务，只能在hexo目录中使用</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">在游览器输入localhost:4000就可以看到生成的博客了，使用ctrl+c可以把服务关掉</span><br></pre></td></tr></table></figure><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p>点击create repository。</p><h2 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# git config --global user.name &quot;yourname&quot;</span><br><span class="line">[root@master ~]# git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>然后生成SSH，一路回车<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure></p><p>这时候它会告诉你生成的.ssh文件夹在什么地方。找到id_rsa.pub,把里面的信息复制到GitHub的setting中一个SSH Keys的设置选项，点击New SSH key，粘贴到里面。</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>执行<code>ssh -T git@github.com</code>，验证是否成功</p><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2><p>打开站点配置文件 _config.yml，修改deploy这一段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git   ///YourgithubName就是你的GitHub账户</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>安装deploy-git插件，才能部署到GitHub上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>推送命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  --  hexo c   //清除之前生成的静态页面，也可以不加</span><br><span class="line">hexo generate  --  hexo g  //生成静态页面</span><br><span class="line">hexo deploy   --  hexo d  //推送生成的静态页面到GitHub上</span><br><span class="line">hexo g -d //也可以一条命令，生成页面后推送</span><br></pre></td></tr></table></figure></p><p>推送完成后等一会就可以在<a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> 这个网站看到你的博客</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>把写好的md文章放到source/_post/下就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master hexo]# ls source/_posts/</span><br><span class="line">new.md</span><br><span class="line">[root@master hexo]# hexo g -d   //生成推送</span><br></pre></td></tr></table></figure></p><p>等一会就可以在你得博客中看到新写的文章了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 介绍与部署应用</title>
      <link href="/2019/05/25/MongoDB%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/"/>
      <url>/2019/05/25/MongoDB%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h1><ul><li>MongoDB 是由 C++语言编写一个基于分布式文件存储的开源 NoSQL 数据库系统。在高负<br>载的情况下，可添加更多的节点，以保证服务性能。 在许多场景下用于代替传统的关系型<br>数据库或键/值存储方式。旨在为 Web 应用提供可扩展的高性能数据存储解决方案。</li><li>MongoDB 提供了一个面向文档存储，操作起来比较简单和容易，可以存储比较复杂的<br>数据类型。最大的特点是支持的查询语言非常强大，语法优点类似于面向对象的查询语<br>言。几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索<br>引。是一个面向集合的，模式自由的文档型数据库。</li><li>MongoDB 适用领域：<ul><li>网站数据</li><li>分布式场景</li><li>缓存层</li><li>文档格式存储</li></ul></li></ul><h1 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h1><ul><li>文档（document）：是 mongodb 的核心概念，是 mongodb 逻辑存储的最小单元</li><li>集合（collection）：多个文档组成集合</li><li>数据库（database）：多个集合组成数据库</li></ul><table><thead><tr><th style="text-align:center">MongoDB</th><th style="text-align:center">关系型数据库</th></tr></thead><tbody><tr><td style="text-align:center">文档（document）</td><td style="text-align:center">行（row）</td></tr><tr><td style="text-align:center">集合（collection）</td><td style="text-align:center">表（table）</td></tr><tr><td style="text-align:center">数据库（database）</td><td style="text-align:center">数据库（database）</td></tr></tbody></table><h1 id="物理存储结构"><a href="#物理存储结构" class="headerlink" title="物理存储结构"></a>物理存储结构</h1><h2 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h2><ul><li>命名空间文件（ns）</li><li>数据文件（0,1,2）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# ll -ht /data/mongodb1/</span><br><span class="line">总用量 81M</span><br><span class="line">drwxr-xr-x 2 root root 4.0K 7 月 11 16:45 diagnostic.data</span><br><span class="line">-rw------- 1 root root 64M 7 月 11 16:32 local.0</span><br><span class="line">-rw------- 1 root root 16M 7 月 11 16:32 local.ns</span><br><span class="line">-rw-r--r-- 1 root root 5 7 月 11 16:32 mongod.lock</span><br><span class="line">drwxr-xr-x 2 root root 4.0K 7 月 11 16:32 journal</span><br><span class="line">-rw-r--r-- 1 root root 69 7 月 11 11:26 storage.bson</span><br></pre></td></tr></table></figure></li></ul><h2 id="日志存储结构"><a href="#日志存储结构" class="headerlink" title="日志存储结构"></a>日志存储结构</h2><ul><li>系统日志文件 logpath</li><li>journal 日志文件</li><li>oplog 复制操作日志文件</li><li>慢查询日志<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# ll -ht /data/logs/mongodb/mongodb1.log</span><br><span class="line">-rwxrwxrwx 1 root root 21K 7 月 11 16:39 /data/logs/mongodb/mongodb1.log</span><br><span class="line">[root@mongodb ~]# ll -ht /data/mongodb1/journal/</span><br><span class="line">总用量 3.1G</span><br><span class="line">-rw------- 1 root root 1.0G 7 月 11 16:32 j._0</span><br><span class="line">-rw------- 1 root root 1.0G 7 月 11 11:26 prealloc.2</span><br><span class="line">-rw------- 1 root root 1.0G 7 月 11 11:26 prealloc.1</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>BSON 是 Binary JSON，是二进制的格式，能将 mongdb 的所有文档表示为字节字符串。</li><li>JSON 是一种轻量级的数据交换格式。它基于 JavaScript 的一个子集</li></ul><h2 id="BSON-的数据类型"><a href="#BSON-的数据类型" class="headerlink" title="BSON 的数据类型"></a>BSON 的数据类型</h2><ul><li>null，代表空或者不存在</li><li>布尔，只有 true 和 false</li><li>数字， 64 位浮点数</li><li>字符串， utf8 字符串</li><li>数组，值或者列表可表示为数组</li><li>对象，对象的数据</li></ul><h2 id="BSON-的特点"><a href="#BSON-的特点" class="headerlink" title="BSON 的特点"></a>BSON 的特点</h2><ul><li>优点：简单，简洁，容易理解、解析、记忆</li></ul><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>文档的键命名几乎所有 utf8 字符，只有少数例外： $开头； \0（空字符）；_ 下划线开头。</li><li>集合的命名几乎所有 utf8 字符，只有少数例外： $开头； \0（空字符）； system.开头； ”&emsp; ”空字符串。</li><li>数据库的命名几乎所有 utf8 字符，只有少数例外： ”&emsp; ”空字符串；\0；空格； . 点； \ ；/。</li></ul><h1 id="安装与管理-MongoDB"><a href="#安装与管理-MongoDB" class="headerlink" title="安装与管理 MongoDB"></a>安装与管理 MongoDB</h1><ul><li><p>官网下载地址：<a href="http://www.mongodb.org/downloads" target="_blank" rel="noopener">http://www.mongodb.org/downloads</a></p></li><li><p>此次安装版本下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# wget https://www.mongodb.com/dr/fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.2.7.tgz/download</span><br></pre></td></tr></table></figure></li><li><p>在CentOS-6.6 64位系统部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# tar xf mongodb-linux-x86_64-rhel62-3.2.7.tgz</span><br><span class="line">[root@mongodb ~]# mv mongodb-linux-x86_64-rhel62-3.2.7/ /usr/local/mongodb</span><br></pre></td></tr></table></figure></li><li><p>指定同一时间最多可开启的文件数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# ulimit -n</span><br><span class="line">1024</span><br><span class="line">[root@mongodb ~]# ulimit -n 65535</span><br><span class="line">[root@mongodb ~]# ulimit -n</span><br><span class="line">65535</span><br></pre></td></tr></table></figure></li><li><p>用户最多可开启的程序数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# ulimit -u</span><br><span class="line">7758</span><br><span class="line">[root@mongodb ~]# ulimit -u 65535</span><br><span class="line">[root@mongodb ~]# ulimit -u</span><br><span class="line">65535</span><br></pre></td></tr></table></figure></li><li><p>创建数据目录，日志文件及目录并创建相应配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# mkdir -p /data/mongodb1</span><br><span class="line">[root@mongodb ~]# mkdir -p /data/logs/mongodb</span><br><span class="line">[root@mongodb ~]# touch /data/logs/mongodb/mongodb1.log</span><br><span class="line">[root@mongodb ~]# cd /usr/local/mongodb/</span><br><span class="line">[root@mongodb mongodb]# ls</span><br><span class="line">bin GNU-AGPL-3.0 MPL-2 README THIRD-PARTY-NOTICES</span><br><span class="line">[root@mongodb mongodb]# mkdir conf</span><br><span class="line">[root@mongodb mongodb]# vim conf/mongodb1.conf</span><br><span class="line">port=27017</span><br><span class="line">dbpath=/data/mongodb1</span><br><span class="line">logpath=/data/logs/mongodb/mongodb1.log</span><br><span class="line">logappend=true</span><br><span class="line">fork=true</span><br><span class="line">maxConns=5000</span><br><span class="line">storageEngine=mmapv1</span><br><span class="line">[root@mongodb mongodb]# pwd</span><br><span class="line">/usr/local/mongodb</span><br><span class="line">[root@mongodb mongodb]# ls bin/</span><br><span class="line">bsondump mongo mongod mongodump mongoexport mongofiles mongoimport</span><br><span class="line">mongooplog mongoperf mongorestore mongos mongostat mongotop</span><br></pre></td></tr></table></figure></li><li><p>启动 MongoDB 数据库， -f 指定配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb mongodb]# /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongodb1.conf</span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 1791</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line">[root@mongodb mongodb]# netstat -anpt |grep mongod</span><br><span class="line">tcp 0 0 0.0.0.0:27017 0.0.0.0:* LISTEN  1791/mongod</span><br><span class="line">[root@mongodb mongodb]# ps aux |grep mongdb</span><br><span class="line">root 1347 0.0 0.0 103248 872 pts/0 S+ 11:28 0:00 grep mongdb</span><br></pre></td></tr></table></figure></li><li><p>设置开机自动启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb mongodb]# vim /etc/rc.local</span><br><span class="line">rm -f /data/mongodb1/mongod.lock</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongodb1.conf</span><br></pre></td></tr></table></figure></li><li><p>连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongo</span><br><span class="line">MongoDB shell version: 3.2.7</span><br><span class="line">connecting to: test</span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive help, type &quot;help&quot;.</span><br><span class="line">For more comprehensive documentation, see</span><br><span class="line">http://docs.mongodb.org/</span><br><span class="line">Questions? Try the support group</span><br><span class="line">http://groups.google.com/group/mongodb-user</span><br><span class="line">Server has startup warnings:</span><br><span class="line">2016-07-11T11:26:52.060+0800 I CONTROL [initandlisten] ** WARNING: You are running this</span><br><span class="line">process as the root user, which is not recommended.</span><br><span class="line">2016-07-11T11:26:52.061+0800 I CONTROL [initandlisten]</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten]</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten] ** WARNING:</span><br><span class="line">/sys/kernel/mm/transparent_hugepage/enabled is &apos;always&apos;.</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten] ** We suggest setting it</span><br><span class="line">to &apos;never&apos;</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten]</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten] ** WARNING:</span><br><span class="line">/sys/kernel/mm/transparent_hugepage/defrag is &apos;always&apos;.</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten] ** We suggest setting it</span><br><span class="line">to &apos;never&apos;</span><br><span class="line">2016-07-11T11:26:52.107+0800 I CONTROL [initandlisten]</span><br><span class="line">&gt; show dbs</span><br><span class="line">local 0.078GB</span><br><span class="line">&gt; exit</span><br><span class="line">bye</span><br></pre></td></tr></table></figure></li><li><p>去除报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">[root@mongodb ~]# echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">[root@mongodb ~]# vim .bash_profile</span><br><span class="line">alias mongo=/usr/local/mongodb/bin/mongo</span><br><span class="line">[root@mongodb ~]# . .bash_profile</span><br></pre></td></tr></table></figure></li><li><p>关闭服务的三种方法</p><ul><li><p>方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# mongo</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.shutdownServer(); //关闭服务</span><br><span class="line">server should be down...</span><br><span class="line">2016-07-11T16:08:20.848+0800 I NETWORK [thread1] trying reconnect to 127.0.0.1:27017</span><br><span class="line">(127.0.0.1) failed</span><br><span class="line">2016-07-11T16:08:20.848+0800 W NETWORK [thread1] Failed to connect to 127.0.0.1:27017,</span><br><span class="line">reason: errno:111 Connection refused</span><br><span class="line">2016-07-11T16:08:20.848+0800 I NETWORK [thread1] reconnect 127.0.0.1:27017 (127.0.0.1)</span><br><span class="line">failed failed</span><br><span class="line">&gt; exit</span><br><span class="line">bye</span><br><span class="line">[root@mongodb ~]# netstat -anpt |grep mongod</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongodb1.conf</span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 1448</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line">[root@mongodb ~]# netstat -anpt |grep mongod</span><br><span class="line">tcp 0 0 0.0.0.0:27017 0.0.0.0:* LISTEN 1448/mongod</span><br><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongod -f</span><br><span class="line">/usr/local/mongodb/conf/mongodb1.conf --shutdown</span><br><span class="line">killing process with pid: 1448</span><br><span class="line">[root@mongodb ~]# netstat -anpt |grep mongod</span><br></pre></td></tr></table></figure></li><li><p>方法三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# kill 1448 //杀死进程号</span><br><span class="line">[root@mongodb ~]# netstat -anpt |grep mongod</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开启两个实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# cd /usr/local/mongodb/conf/</span><br><span class="line">[root@mongodb conf]# cp mongodb&#123;1,2&#125;.conf</span><br><span class="line">[root@mongodb conf]# ls</span><br><span class="line">mongodb1.conf mongodb2.conf</span><br><span class="line">[root@mongodb conf]# vim mongodb2.conf</span><br><span class="line">port=27018</span><br><span class="line">dbpath=/data/mongodb2</span><br><span class="line">logpath=/data/logs/mongodb/mongodb2.log</span><br><span class="line">logappend=true</span><br><span class="line">fork=true</span><br><span class="line">maxConns=5000</span><br><span class="line">storageEngine=mmapv1</span><br><span class="line">[root@mongodb conf]# mkdir /data/mongodb2</span><br><span class="line">[root@mongodb conf]# touch /data/logs/mongodb/mongodb2.log</span><br><span class="line">[root@mongodb conf]# chmod 777 /data/logs/mongodb/mongodb2.log</span><br></pre></td></tr></table></figure></li><li><p>编写启停脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb conf]# cd /etc/init.d/</span><br><span class="line">[root@mongodb init.d]# vim mongodb</span><br><span class="line">#!/bin/bash</span><br><span class="line">INSTANCE=$1</span><br><span class="line">ACTION=$2</span><br><span class="line">case &quot;$ACTION&quot; in</span><br><span class="line">&apos;start&apos;)</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/&quot;$INSTANCE&quot;.conf;;</span><br><span class="line">&apos;stop&apos;)</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/&quot;$INSTANCE&quot;.conf --shutdown;;</span><br><span class="line">&apos;restart&apos;)</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/&quot;$INSTANCE&quot;.conf --shutdown</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/&quot;$INSTANCE&quot;.conf;;</span><br><span class="line">esac</span><br><span class="line">[root@mongodb init.d]# chmod +x mongodb</span><br><span class="line">[root@mongodb ~]# /etc/init.d/mongodb mongodb1 start</span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 1521</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line">[root@mongodb init.d]# /etc/init.d/mongodb mongodb2 start</span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 1498</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line">[root@mongodb init.d]# netstat -anpt |grep mongod</span><br><span class="line">tcp 0 0 0.0.0.0:27017 0.0.0.0:* LISTEN  1521/mongod</span><br><span class="line">tcp 0 0 0.0.0.0:27018 0.0.0.0:* LISTEN  1498/mongod</span><br></pre></td></tr></table></figure></li></ul><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">show dbs</td><td style="text-align:center">查看当前示例下的数据库列表，等同于 show database</td></tr><tr><td style="text-align:center">show users</td><td style="text-align:center">显示用户</td></tr><tr><td style="text-align:center">use &lt;db_name&gt;</td><td style="text-align:center">切换当前数据库</td></tr><tr><td style="text-align:center">db.help()</td><td style="text-align:center">显示数据库操作命令</td></tr><tr><td style="text-align:center">show collections</td><td style="text-align:center">显示当前数据库中的集合，等同于 show tables</td></tr><tr><td style="text-align:center">db.mycoll.help()</td><td style="text-align:center">显示集合操作命令， mycoll 是当前下叫做 mycoll 的集合</td></tr><tr><td style="text-align:center">db.foo.find()</td><td style="text-align:center">对当前数据库中 foo 集合进行数据查找</td></tr><tr><td style="text-align:center">ctrl + d</td><td style="text-align:center">退出</td></tr><tr><td style="text-align:center">help</td><td style="text-align:center">查看帮助</td></tr></tbody></table><h1 id="数据库备份与导入"><a href="#数据库备份与导入" class="headerlink" title="数据库备份与导入"></a>数据库备份与导入</h1><h2 id="数据备份方法"><a href="#数据备份方法" class="headerlink" title="数据备份方法"></a>数据备份方法</h2><ul><li>导入： mongoimport</li><li>导出： mongoexport</li><li>备份<ul><li>逻辑备份： mongodump</li><li>物理备份：冷备</li></ul></li><li>恢复： mongorestore</li></ul><h2 id="复制数据库"><a href="#复制数据库" class="headerlink" title="复制数据库"></a>复制数据库</h2><ul><li>复制本地数据库： db.copyDatabase(“from_db”,”to_db”,”locolhost”)</li><li>复制远程数据库： db.copyDatabase(“from_db”,”to_db”,”192.168.200.101”)</li><li>克隆集合： db.runCommand({cloneCollection:”accp.t1”,from:”192.168.200.101”})</li></ul><h2 id="查看帮助的方法："><a href="#查看帮助的方法：" class="headerlink" title="查看帮助的方法："></a>查看帮助的方法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongoimport --help</span><br><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongoexport --help</span><br><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongodump --help</span><br></pre></td></tr></table></figure><h2 id="备份案例"><a href="#备份案例" class="headerlink" title="备份案例"></a>备份案例</h2><ul><li><p>将 MySQL 数据库内容导入 mongodb</p><ul><li><p>安装 mysql 数据库，创建一个表并插入一些内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# yum -y install mysql mysql-server</span><br><span class="line">[root@mongodb ~]# /etc/init.d/mysqld start</span><br><span class="line">[root@mongodb ~]# mysql</span><br><span class="line">mysql&gt; create database benet;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; use benet;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t1(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">mysql&gt; insert into t1 values(1,&quot;Jack&quot;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; insert into t1 values(2,&quot;Rose&quot;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+------+------+</span><br><span class="line">| id | name |</span><br><span class="line">+------+------+</span><br><span class="line">| 1 | Jack |</span><br><span class="line">| 2 | Rose |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)21 / 25</span><br><span class="line">mysql&gt; select * from t1 into outfile &apos;/tmp/t1_mysql.csv&apos; fields terminated by &quot;,&quot;;</span><br><span class="line">//导出 t1 表里的内容到/tmp/t1_mysql.csv 文件，以“，”逗号分割</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; Bye</span><br><span class="line">[root@mongodb ~]# cat /tmp/t1_mysql.csv</span><br><span class="line">1,Jack</span><br><span class="line">2,Rose</span><br></pre></td></tr></table></figure></li><li><p>将 csv 格式的表导入 mongodb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# /usr/local/mongodb/bin/mongoimport -d benet -c tt1 -f id,name --file</span><br><span class="line">/tmp/t1_mysql.csv --type csv</span><br><span class="line">2016-07-11T18:31:23.160+0800 connected to: localhost</span><br><span class="line">2016-07-11T18:31:23.195+0800 imported 2 documents</span><br></pre></td></tr></table></figure></li><li><p>将/tmp/t1_mysql.csv 文件导入到 mongodb 的 benet 数据库下的 tt1 表，字段名称为 id 和name，文件类型为 csv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@mongodb ~]# mongo</span><br><span class="line">&gt; use benet</span><br><span class="line">switched to db benet</span><br><span class="line">&gt; show collections</span><br><span class="line">system.indexes</span><br><span class="line">tt1</span><br><span class="line">user</span><br><span class="line">&gt; db.tt1.find();</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5783757b737177ed108eb553&quot;), &quot;id&quot; : 1, &quot;name&quot; : &quot;Jack&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5783757b737177ed108eb554&quot;), &quot;id&quot; : 2, &quot;name&quot; : &quot;Rose&quot; &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Dockerfile制作tomcat镜像</title>
      <link href="/2019/05/22/dockerfile/"/>
      <url>/2019/05/22/dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-概述："><a href="#Docker-概述：" class="headerlink" title="Docker 概述："></a>Docker 概述：</h2><p>&emsp;&emsp;在前面的例子中，我们从下载镜像，启动容器，在容器中输入命令来运行程序，这些命令都是手工一条条往里输入的，无法重复利用，而且效率很低。所以就需要一种文件或脚本，我们把想执行的操作以命令的方式写入其中，然后让 docker 读取并分析、执行，那么重复构建、更新将变得很方便，所以Dockerfile 就此诞生了</p><h2 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h2><ul><li>FROM 命令。用法， FROM &lt;image>:&lt;tag>。 FROM 命令告诉 docker 我们构建的镜像是以哪个(发行版)镜像为基础的</li><li>RUN 命令。用法 RUN <command>。 RUN 后面接要执行的命令，比如，我们想在镜像中安装 vim，只需在</li><li>Dockfile 中写入 RUN yum install -y vim</li><li>ENV 命令。用法,ENV <key> <value>。 ENV 命令主要用于设置容器运行时的环境变量</value></key></li><li>ADD 命令。用法， ADD <src> <dest>。 ADD 主要用于将宿主机中的文件添加到镜像中</dest></src></li></ul><h2 id="基于-dockerfile-制作-tomcat-镜像"><a href="#基于-dockerfile-制作-tomcat-镜像" class="headerlink" title="基于 dockerfile 制作 tomcat 镜像"></a>基于 dockerfile 制作 tomcat 镜像</h2><ul><li>首先建一个目录构建我们的环境。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir tomcat_centos</span><br><span class="line">[root@localhost ~]# cd tomcat_centos</span><br></pre></td></tr></table></figure><ul><li>上传 tomcat 和 jdk 到该目录下。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat_centos]# ls</span><br><span class="line">apache-tomcat-7.0.54.tar.gz jdk-7u65-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>编辑 Dockerfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat_centos]# vim Dockerfile</span><br><span class="line">FROM centos:1</span><br><span class="line">MAINTAINER from bistros &lt;bistros@163.com&gt;</span><br><span class="line">#copy jdk and tomcat into image</span><br><span class="line">ADD ./apache-tomcat-7.0.54.tar.gz /root</span><br><span class="line">ADD ./jdk-7u65-linux-x64.tar.gz /root</span><br><span class="line">#set environment variable</span><br><span class="line">ENV JAVA_HOME /root/jdk1.7.0_65</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line">#define entry point which will be run first when the container starts up</span><br><span class="line">ENTRYPOINT /root/apache-tomcat-7.0.54/bin/startup.sh &amp;&amp; tail -F /root/apache-tomcat-</span><br><span class="line">7.0.54/logs/catalina.out</span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat_centos]# docker build -t bistros/tomcat:centos .</span><br><span class="line">Sending build context to Docker daemon 151.3 MB</span><br><span class="line">Step 1 : FROM centos:1</span><br><span class="line">---&gt; 4a7667a30862</span><br><span class="line">Step 2 : MAINTAINER from bistros &lt;bistros@163.com&gt;</span><br><span class="line">---&gt; Running in 68bf1a959d26</span><br><span class="line">---&gt; fcf74efba621</span><br><span class="line">Removing intermediate container 68bf1a959d26</span><br><span class="line">Step 3 : ADD ./apache-tomcat-7.0.54.tar.gz /root</span><br><span class="line">---&gt; 66cddab1de86</span><br><span class="line">Removing intermediate container f0b727f5be51</span><br><span class="line">Step 4 : ADD ./jdk-7u65-linux-x64.tar.gz /root</span><br><span class="line">---&gt; e5bb29fe10f6</span><br><span class="line">Removing intermediate container b26f642c67ac</span><br><span class="line">Step 5 : ENV JAVA_HOME /root/jdk1.7.0_65</span><br><span class="line">---&gt; Running in dfd83d97c8ed</span><br><span class="line">---&gt; e434fbfdf162</span><br><span class="line">Removing intermediate container dfd83d97c8ed</span><br><span class="line">Step 6 : ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line">---&gt; Running in 2233e413bb0d</span><br><span class="line">---&gt; 6a2c544ad3c2</span><br><span class="line">Removing intermediate container 2233e413bb0d</span><br><span class="line">Step 7 : ENTRYPOINT /root/apache-tomcat-7.0.54/bin/startup.sh &amp;&amp; tail -F /root/apache-tomcat-</span><br><span class="line">7.0.54/logs/catalina.out</span><br><span class="line">---&gt; Running in 8d58b19e8ad7</span><br><span class="line">---&gt; c0c55ad98c79</span><br><span class="line">Removing intermediate container 8d58b19e8ad7</span><br><span class="line">Successfully built c0c55ad98c79</span><br></pre></td></tr></table></figure><ul><li>-t 选择指定生成镜像的用户名，仓库名和 tag</li><li>–rm=true 指定在生成镜像过程中删除中间产生的临时容器。</li></ul><h2 id="查看新产生的镜像"><a href="#查看新产生的镜像" class="headerlink" title="查看新产生的镜像"></a>查看新产生的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat_centos]# docker images bistros/tomcat:centos</span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class="line">bistros/tomcat centos c0c55ad98c79 About a minute ago 502.7 MB</span><br></pre></td></tr></table></figure><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><ul><li>手动映射主机端口启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat_centos]# docker run -d -p 8090:8080 bistros/tomcat:centos</span><br><span class="line">65a0f0910f174132e009ca686b283c0dc58df0dd3000c144cd4c175f2078de37</span><br><span class="line">[root@localhost tomcat_centos]# docker ps -a</span><br><span class="line">CONTAINER ID IMAGE COMMAND</span><br><span class="line">CREATED STATUS PORTS</span><br><span class="line">NAMES5 / 5</span><br><span class="line">65a0f0910f17 bistros/tomcat:centos &quot;/bin/sh -c &apos;/root/ap&quot; 50 seconds ago</span><br><span class="line">Up 48 seconds 0.0.0.0:8090-&gt;8080/tcp pensive_kare</span><br></pre></td></tr></table></figure><ul><li>-p 指定主机 80 端口与容器 8080 端口进行绑定</li><li>-d 指定容器运行后与当前 tty 分离，后台运行</li><li>65a0 是镜像的 ID 前 4 位。<br></li></ul><p>通过 http://宿主机 IP:8090,即可看见我们熟悉的 tomcat 首页了。</p><ul><li>自动映射主机端口的启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat_centos]# docker run -d -p 8080 --name tomcat</span><br><span class="line">bistros/tomcat:centos</span><br><span class="line">2f20477608f8d335a3424acd6f54ad5900db86bdbf48af2ea2777159a7646566</span><br><span class="line">[root@localhost tomcat_centos]# docker ps -a</span><br><span class="line">CONTAINER ID IMAGE COMMAND</span><br><span class="line">CREATED STATUS PORTS</span><br><span class="line">NAMES</span><br><span class="line">2f20477608f8 bistros/tomcat:centos &quot;/bin/sh -c &apos;/root/ap&quot; 8 seconds ago</span><br><span class="line">Up 6 seconds 0.0.0.0:32768-&gt;8080/tcp tomcat</span><br></pre></td></tr></table></figure><p>这样就要通过 http://宿主机 IP:32768 访问了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync远程同步</title>
      <link href="/2019/05/22/rsync/"/>
      <url>/2019/05/22/rsync/</url>
      
        <content type="html"><![CDATA[<h2 id="关于rsync"><a href="#关于rsync" class="headerlink" title="关于rsync"></a>关于rsync</h2><ul><li>一款快速增量备份工具<ul><li>Remote Sync，远程同步</li><li>支持本地复制，或者与其他SSH、rsync主机同步</li><li>官方网站：<a href="http://rsync.samba.org/" target="_blank" rel="noopener">http://rsync.samba.org/</a></li></ul></li><li>rsync同步源<ul><li>指备份操作的远程服务器，也称为备份源</li></ul></li><li>基本思路<ul><li>建立rsyncd.conf配置文件、独立的账号文件</li><li>启用rsync的–daemon模式</li></ul></li></ul><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>深圳、北京各一台Web服务器</li><li>两台服务器的文档保持一致</li></ul><p><img src="/images/rsync1.png" alt="rsync1"></p><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><ul><li>服务器A（北京）作为rsync发起端(192.168.22.186)</li><li>服务器B（深圳）作为远程rsync服务器(192.168.22.187)</li><li>结合inotify机制实现触发式的上行同步</li></ul><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>在服务器B中配置rsync备份源</li><li>在服务器A中发起rsync上行同步</li><li>将rsync与inotify-tools工具结合使用</li></ul><h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><ul><li>用户backuper，允许下行同步</li><li><p>操作的目录为 /var/www/html/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@186 ~]# mkdir -pv /var/www/html</span><br></pre></td></tr></table></figure></li><li><p>配置文件rsyncd.conf<br>需手动建立，语法类似于Samba配置<br>认证配置auth users、secrets file，不加则为匿名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@186 ~]# vi /etc/rsyncd.conf</span><br><span class="line">uid = nobody</span><br><span class="line">gid = nobody</span><br><span class="line">use chroot = yes</span><br><span class="line">address = 192.168.22.186</span><br><span class="line">port 873</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">hosts allow = 192.168.22.0/24</span><br><span class="line">[wwwroot] //共享模块名称</span><br><span class="line">    path = /var/www/html</span><br><span class="line">    comment = Document Root of www1.benet.com</span><br><span class="line">    read only = yes</span><br><span class="line">    dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z</span><br><span class="line">    auth users = backuper</span><br><span class="line">    secrets file = /etc/rsyncd_users.db</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>rsync账号文件<br>采用“用户名:密码”的记录格式<br>独立的账号数据，不依赖于系统账号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@186 ~]# vi /etc/rsyncd_users.db</span><br><span class="line">backuper:123</span><br><span class="line">[root@186 ~]# chmod 600 /etc/rsyncd_users.db</span><br></pre></td></tr></table></figure></li></ul><p>注意：上行必须执行，否则后面的服务启动后，密码验证将失败！！！！</p><ul><li>启用rsync服务</li></ul><p>通过–daemon独自提供服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@186 ~]# rsync --daemon \\启动rsync服务</span><br><span class="line">[root@186 ~]# netstat -anpt |grep rsync   </span><br><span class="line">tcp        0      0 192.168.22.186:873          0.0.0.0:*                   LISTEN      3190/rsync</span><br><span class="line">[root@186 ~]# cat /var/run/rsyncd.pid</span><br><span class="line">3190</span><br><span class="line">[root@186 ~]# kill $(cat /var/run/rsyncd.pid)  \\结束rsync服务</span><br><span class="line">[root@186 ~]# netstat -anpt |grep rsync</span><br><span class="line">[root@186 ~]#</span><br><span class="line">[root@186 ~]# rsync --daemon</span><br><span class="line">[root@186 ~]# netstat -anpt |grep rsync</span><br><span class="line">tcp        0      0 192.168.22.186:873          0.0.0.0:*                   LISTEN      3271/rsync</span><br></pre></td></tr></table></figure></p><ul><li><p>rsync命令的用法</p><ul><li>基本格式：rsync [选项] 原始位置 目标位置</li><li>常用选项：<ul><li>-a：归档模式，递归并保留对象属性，等同于 -rlptgoD</li><li>-v：显示同步过程的详细（verbose）信息</li><li>-z：在传输文件时进行压缩（compress）</li><li>-H：保留硬连接文件</li><li>-A：保留ACL属性信息</li><li>–delete：删除目标位置有而原始位置没有的文件</li><li>–checksum：根据对象的校验和来决定是否跳过文件</li></ul></li><li>其中：<ul><li>-a：归档模式，递归并保留对象属性，等同于 -rlptgoD</li><li>-r：递归模式，包含目录及子目录中所有文件</li><li>-l：对于符号链接文件仍然复制为符号链接文件</li><li>-p：保留文件的权限标记</li><li>-t：保留文件的时间标记</li><li>-g：保留文件的属组标记（仅超级用户使用）</li><li>-o：保留文件的属主标记（仅超级用户使用）</li><li>-D：保留设备文件及其他特殊文件</li></ul></li></ul></li><li><p>配置源的两种表示方法</p><ul><li>用户名@主机地址::共享模块名</li><li>rsync://用户名@主机地址/共享模块名</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[root@186 ~]# touch /var/www/html/file&#123;1..10&#125;</span><br><span class="line">[root@186 ~]# ls /var/www/html/</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9</span><br><span class="line"></span><br><span class="line">[root@187 ~]# mkdir /test</span><br><span class="line">[root@187 ~]# rsync -avz backuper@192.168.22.186::wwwroot /test</span><br><span class="line">Password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">file1</span><br><span class="line">file10</span><br><span class="line">file2</span><br><span class="line">file3</span><br><span class="line">file4</span><br><span class="line">file5</span><br><span class="line">file6</span><br><span class="line">file7</span><br><span class="line">file8</span><br><span class="line">file9</span><br><span class="line"></span><br><span class="line">sent 254 bytes  received 535 bytes  105.20 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">[root@187 ~]# ls /test/</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9</span><br><span class="line">[root@186 ~]# echo &quot;aaaaa&quot; &gt; /var/www/html/file1</span><br><span class="line">[root@187 ~]# rsync -avz backuper@192.168.22.186::wwwroot /test</span><br><span class="line">Password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">file1</span><br><span class="line"></span><br><span class="line">sent 80 bytes  received 225 bytes  122.00 bytes/sec</span><br><span class="line">total size is 6  speedup is 0.02</span><br><span class="line">[root@187 ~]# cat /test/file1</span><br><span class="line">aaaaa</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[root@187 ~]# rm -rf /test/*</span><br><span class="line">[root@187 ~]# rsync -avz rsync://backuper@192.168.22.186/wwwroot /test/</span><br><span class="line">Password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">file1</span><br><span class="line">file10</span><br><span class="line">file2</span><br><span class="line">file3</span><br><span class="line">file4</span><br><span class="line">file5</span><br><span class="line">file6</span><br><span class="line">file7</span><br><span class="line">file8</span><br><span class="line">file9</span><br><span class="line"></span><br><span class="line">sent 254 bytes  received 552 bytes  230.29 bytes/sec</span><br><span class="line">total size is 6  speedup is 0.01</span><br><span class="line">[root@187 ~]# ls /test/</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">[root@187 ~]# touch /test/abc&#123;a..d&#125;</span><br><span class="line">[root@187 ~]# rsync -avz --delete rsync://backuper@192.168.22.186/wwwroot /test/    //--delete：删除目标位置有而原始位置没有的文件</span><br><span class="line">Password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">deleting abcd</span><br><span class="line">deleting abcc</span><br><span class="line">deleting abcb</span><br><span class="line">deleting abca</span><br><span class="line">./</span><br><span class="line"></span><br><span class="line">sent 64 bytes  received 183 bytes  70.57 bytes/sec</span><br><span class="line">total size is 6  speedup is 0.02</span><br><span class="line">[root@187 ~]# ls /test/</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9</span><br></pre></td></tr></table></figure><ul><li>rsync源的免交互处理<ul><li>使用 –password-file= 密码文件</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@187 ~]# vi /etc/server.pass</span><br><span class="line">123</span><br><span class="line">[root@187 ~]# chmod 600 /etc/server.pass</span><br><span class="line">[root@187 ~]# touch /test/file&#123;100..105&#125;.txt</span><br><span class="line">[root@187 ~]# /usr/bin/rsync -az --delete --password-file=/etc/server.pass backuper@192.168.22.186::wwwroot /test/</span><br><span class="line">[root@187 ~]# ls /test/</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9</span><br><span class="line">[root@187 ~]# crontab -e</span><br><span class="line">30      22      *       *       *       /usr/bin/rsync -az --delete --password-file=/etc/server.pass backuper@192.168.22.186::wwwroot /test/</span><br><span class="line"></span><br><span class="line">[root@187 ~]# /etc/init.d/crond status</span><br><span class="line">crond (pid  2069) 正在运行...</span><br><span class="line">[root@187 ~]# chkconfig --list crond</span><br><span class="line">crond          0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><ul><li>rsync实时同步<ul><li>定期同步的不足</li><li>执行备份的时间固定，延迟明显、实时性差</li><li>当同步源长期不变化时，密集的定期任务是不必要的</li><li>实时同步的优点</li><li>一旦同步源出现变化，立即启动备份</li><li>只要同步源无变化，则不执行备份</li><li>Linux内核的inotify机制</li><li>从版本2.6.13开始提供</li><li>可以监控文件系统的变动情况，并作出通知响应</li><li>辅助软件：inotify-tools</li></ul></li></ul><p><img src="/images/rsync2.png" alt="rsync2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@186 ~]# chown nobody:nobody /var/www/html</span><br><span class="line">[root@186 ~]# vi /etc/rsyncd.conf</span><br><span class="line">uid = nobody</span><br><span class="line">gid = nobody</span><br><span class="line">use chroot = yes</span><br><span class="line">address = 192.168.22.186</span><br><span class="line">port 873</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">hosts allow = 192.168.22.0/24</span><br><span class="line">[wwwroot]</span><br><span class="line">    path = /var/www/html</span><br><span class="line">    comment = Document Root of www1.benet.com</span><br><span class="line">    read only = no  \\修改此处由yes改为no,以便服务器有写入权限。</span><br><span class="line">    dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z</span><br><span class="line">    auth users = backuper</span><br><span class="line">    secrets file = /etc/rsyncd_users.db</span><br><span class="line"></span><br><span class="line">[root@186 ~]# kill $(cat /var/run/rsyncd.pid)</span><br><span class="line">[root@186 ~]# rsync --daemon</span><br></pre></td></tr></table></figure><ul><li>调整inotify内核参数<ul><li>max_queue_events：监控队列大小</li><li>max_user_instances：最多监控实例数</li><li>max_user_watches：每个实例最多监控文件数</li></ul></li></ul><p>========================下面在187客户端上的操作==============</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@187 ~]# vi /etc/sysctl.conf</span><br><span class="line">...</span><br><span class="line">fs.inotify.max_queued_events = 16384</span><br><span class="line">fs.inotify.max_user_instances = 1024</span><br><span class="line">fs.inotify.max_user_watches = 1048576</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@187 ~]# sysctl -p //使本文立即生效</span><br></pre></td></tr></table></figure><p>下面，将软件inotify-tools-3.14.tar.gz上传187客户端中</p><ul><li>安装inotify-tools辅助工具<ul><li>inotifywait：用于持续监控，实时输出结果</li><li>inotifywatch：用于短期监控，任务完成后再出结果</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@187 ~]# tar xf inotify-tools-3.14.tar.gz</span><br><span class="line">[root@187 ~]# cd inotify-tools-3.14</span><br><span class="line">[root@187 inotify-tools-3.14]# ./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">[root@187 ~]# mkdir -pv /var/www/html</span><br><span class="line">[root@187 ~]# echo &quot;www.benet.com&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@187 ~]# inotifywait -mrq -e modify,create,move,delete /var/www/html</span><br><span class="line">/var/www/html/ MODIFY index.html</span><br><span class="line">/var/www/html/ CREATE nihao</span><br><span class="line">/var/www/html/ DELETE nihao</span><br><span class="line">/var/www/html/ MOVED_FROM index.html</span><br><span class="line">/var/www/html/ MOVED_TO index.htm</span><br></pre></td></tr></table></figure><p>在另一个187客户机的ssh通道中的操作，会出现以上内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@187 ~]# echo &quot;www.accp.com&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@187 ~]# cd /var/www/html/</span><br><span class="line">[root@187 html]# touch nihao</span><br><span class="line">[root@187 html]# rm -rf nihao</span><br><span class="line">[root@187 html]# mv index.html index.htm</span><br><span class="line">[root@187 html]#</span><br></pre></td></tr></table></figure><ul><li>通过inotifywait触发rsync同步操作<ul><li>使用while、read持续获取监控结果</li><li>根据结果可以作进一步判断，决定执行何种操作</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@187 ~]# vi /opt/inotify_rsync.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">#abc</span><br><span class="line">INOTIFY_CMD=&quot;/usr/local/bin/inotifywait -mrq -e modify,create,attrib,move,delete /var/www/html/&quot;</span><br><span class="line">RSYNC_CMD=&quot;/usr/bin/rsync -azH --delete --password-file=/etc/server.pass /var/www/html/ backuper@192.168.22.186::wwwroot&quot;</span><br><span class="line">$INOTIFY_CMD | while read DIRECTORY EVENT FILE</span><br><span class="line">do</span><br><span class="line">    if [ $(pgrep rsync | wc -l) -le 0 ] ; then</span><br><span class="line">        $RSYNC_CMD</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@187 ~]# chmod +x /opt/inotify_rsync.sh</span><br><span class="line">[root@187 ~]# nohup /bin/bash /opt/inotify_rsync.sh &amp;</span><br><span class="line">//注意：nohup 可以保证当前执行程序的用户登出当前系统后，当前程序不停止，仍然执行后台程序。</span><br></pre></td></tr></table></figure><h2 id="实验效果："><a href="#实验效果：" class="headerlink" title="实验效果："></a>实验效果：</h2><p>在187 /var/www/html下随意增删改文件，186下的/var/www/html/下会实时同步。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层交换机配置DHCP为不同VLAN分配IP地址</title>
      <link href="/2019/05/18/%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2DHCP/"/>
      <url>/2019/05/18/%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2DHCP/</url>
      
        <content type="html"><![CDATA[<p>三层交换的原理以及DHCP的原理，作者在这里就不详细的解释了，在这里通过一个案例来了解使用三层交换做DHCP服务器，并为不同网段分配IP地址。在生产环境中，使用路由器或交换机做DHCP服务器要常见一些。</p><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>1、在SW1上配置DHCP服务，能够为以下四个不同部门分配不同网段的IP地址。<br>2、在SW1上配置VTP Server，在SW2和SW3上配置VTP Client，并将指定部门加入相关VLAN。<br>3、注意：交换机和交换机之间使用中继链路，而与路由器之间则不需要</p><h1 id="R1配置如下："><a href="#R1配置如下：" class="headerlink" title="R1配置如下："></a>R1配置如下：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#配置路由器内网接口IP和外网接口IP</span><br><span class="line">R1(config)#int f0/0</span><br><span class="line">R1(config-if)#ip add 10.0.0.2 255.0.0.0</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">R1(config-if)#exit</span><br><span class="line">R1(config)#int f1/0</span><br><span class="line">R1(config-if)#ip add 202.106.123.1 255.255.255.248</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">#配置到内网的静态路由条目</span><br><span class="line">R1(config)#ip route 192.168.1.0 255.255.255.0 10.0.0.1</span><br><span class="line">R1(config)#ip route 192.168.2.0 255.255.255.0 10.0.0.1</span><br><span class="line">R1(config)#ip route 192.168.3.0 255.255.255.0 10.0.0.1</span><br><span class="line">R1(config)#ip route 192.168.4.0 255.255.255.0 10.0.0.1</span><br></pre></td></tr></table></figure><h1 id="SW1配置如下"><a href="#SW1配置如下" class="headerlink" title="SW1配置如下"></a>SW1配置如下</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#配置到路由器接口的IP地址</span><br><span class="line">SW1(config)#ip routing</span><br><span class="line">SW1(config)#int f0/0</span><br><span class="line">SW1(config-if)#no switchport</span><br><span class="line">SW1(config-if)#ip add 10.0.0.1 255.0.0.0</span><br><span class="line">SW1(config-if)#no shutdown</span><br><span class="line">#配置交换机之间的接口链路为中继链路(trunk)</span><br><span class="line">SW1(config)#int range f0/1 -2</span><br><span class="line">SW1(config-if-range)#switchport mode trunk</span><br><span class="line">SW1(config-if-range)#no sh</span><br><span class="line">#配置VTP Server</span><br><span class="line">SW1#vlan database</span><br><span class="line">SW1(vlan)#vtp domain test</span><br><span class="line">SW1(vlan)#vtp server</span><br><span class="line">SW1(vlan)#vtp password 123</span><br><span class="line">SW1(vlan)#vtp pruning</span><br><span class="line">#创建vlan(为四个部门创建不同的vlan)</span><br><span class="line">SW1#vlan database</span><br><span class="line">SW1(vlan)#vlan 10</span><br><span class="line">SW1(vlan)#vlan 20</span><br><span class="line">SW1(vlan)#vlan 30</span><br><span class="line">SW1(vlan)#vlan 40</span><br><span class="line">#配置vlan虚拟接口地址</span><br><span class="line">SW1(config-if)#intvlan 10</span><br><span class="line">SW1(config-if)#ip add 192.168.1.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no sh</span><br><span class="line">SW1(config-if)#exit</span><br><span class="line">SW1(config-if)#intvlan 20</span><br><span class="line">SW1(config-if)#ip add 192.168.2.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no sh</span><br><span class="line">SW1(config-if)#exit</span><br><span class="line">SW1(config-if)#intvlan 30</span><br><span class="line">SW1(config-if)#ip add 192.168.3.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no sh</span><br><span class="line">SW1(config-if)#exit</span><br><span class="line">SW1(config-if)#intvlan 40</span><br><span class="line">SW1(config-if)#ip add 192.168.4.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no sh</span><br><span class="line">#注意：如果要配置DHCP中继服务，需要在vlan虚接口中添加一条DHCP服务器的地址SW1(config-if)#ip helper-address [DHCP服务器地址]</span><br><span class="line">#配置一条默认路由，使能够访问外网</span><br><span class="line">SW1(config)#ip route 0.0.0.0 0.0.0.0 10.0.0.2</span><br><span class="line">#配置不同网段的DHCP地址池(因为有四个vlan，所以要配四个网段地址池)</span><br><span class="line">SW1(config)#ipdhcp pool vlan10</span><br><span class="line">SW1(dhcp-config)#network 192.168.1.0 255.255.255.0</span><br><span class="line">SW1(dhcp-config)#default-router 192.168.1.1</span><br><span class="line">SW1(dhcp-config)#dns-server 202.106.0.20</span><br><span class="line">SW1(dhcp-config)#lease 2</span><br><span class="line">SW1(dhcp-config)#exit</span><br><span class="line">SW1(config)#ipdhcp pool vlan20</span><br><span class="line">SW1(dhcp-config)#network 192.168.2.0 255.255.255.0</span><br><span class="line">SW1(dhcp-config)#default-router 192.168.2.1</span><br><span class="line">SW1(dhcp-config)#dns-server 202.106.0.20</span><br><span class="line">SW1(dhcp-config)#lease 2</span><br><span class="line">SW1(dhcp-config)#exit</span><br><span class="line">SW1(config)#ipdhcp pool vlan30</span><br><span class="line">SW1(dhcp-config)#network 192.168.3.0 255.255.255.0</span><br><span class="line">SW1(dhcp-config)#default-router 192.168.3.1</span><br><span class="line">SW1(dhcp-config)#dns-server 202.106.0.20</span><br><span class="line">SW1(dhcp-config)#lease 2</span><br><span class="line">SW1(dhcp-config)#exit</span><br><span class="line">SW1(config)#ipdhcp pool vlan40</span><br><span class="line">SW1(dhcp-config)#network 192.168.4.0 255.255.255.0</span><br><span class="line">SW1(dhcp-config)#default-router 192.168.4.1</span><br><span class="line">SW1(dhcp-config)#dns-server 202.106.0.20</span><br><span class="line">SW1(dhcp-config)#lease 2</span><br><span class="line">#注意：如果要设置保留地址可以配置ipdhcp excluded-address low-address [high-address]</span><br></pre></td></tr></table></figure><h1 id="SW2配置如下"><a href="#SW2配置如下" class="headerlink" title="SW2配置如下"></a>SW2配置如下</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#配置与三层交换的链路为中继链路(trunk)</span><br><span class="line">SW2(config)#int f0/0</span><br><span class="line">SW2(config-if)#switchport mode trunk</span><br><span class="line">SW2(config-if)#no sh</span><br><span class="line">#配置VTP client(配置完VTP client后能够学习三层交换上创建的vlan)</span><br><span class="line">SW2#vlan database</span><br><span class="line">SW2(vlan)#vtp domain test</span><br><span class="line">SW2(vlan)#vtp client</span><br><span class="line">SW2(vlan)#vtp password 123</span><br><span class="line">SW2(vlan)#vtp pruning</span><br><span class="line">#将指定的接口加入到相应的vlan中</span><br><span class="line">SW2(config)#int f0/1</span><br><span class="line">SW2(config-if)#switchport access vlan 10</span><br><span class="line">SW2(config-if)#no sh</span><br><span class="line">SW2(config-if)#exit</span><br><span class="line">SW2(config-if)#int f0/2</span><br><span class="line">SW2(config-if)#switchport access vlan 20</span><br><span class="line">SW2(config-if)#no sh</span><br></pre></td></tr></table></figure><h1 id="SW3配置如下"><a href="#SW3配置如下" class="headerlink" title="SW3配置如下"></a>SW3配置如下</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#配置与三层交换的链路为中继链路(trunk)</span><br><span class="line">SW3(config)#int f0/0</span><br><span class="line">SW3(config-if)#switchport mode trunk</span><br><span class="line">SW3(config-if)#no sh</span><br><span class="line">#配置VTP client(配置完VTP client后能够学习三层交换上创建的vlan)</span><br><span class="line">SW3#vlan database</span><br><span class="line">SW3(vlan)#vtp domain test</span><br><span class="line">SW3(vlan)#vtp client</span><br><span class="line">SW3(vlan)#vtp password 123</span><br><span class="line">SW3(vlan)#vtp pruning</span><br><span class="line">#将指定的接口加入到相应的vlan中</span><br><span class="line">SW3(config)#int f0/1</span><br><span class="line">SW3(config-if)#switchport access vlan 30</span><br><span class="line">SW3(config-if)#no sh</span><br><span class="line">SW3(config-if)#exit</span><br><span class="line">SW3(config-if)#int f0/2</span><br><span class="line">SW3(config-if)#switchport access vlan 40</span><br><span class="line">SW3(config-if)#no sh</span><br></pre></td></tr></table></figure><p>配置完以上的所有配置后，在客户端将IP地址设置为DHCP自动获取，就可以获取相应的IP了，并且可以访问互联网了</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPTP搭建</title>
      <link href="/2019/05/15/PPTP%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/05/15/PPTP%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-你所需要的软件"><a href="#1-你所需要的软件" class="headerlink" title="1.你所需要的软件"></a>1.你所需要的软件</h1><p>pppd    ppp拨号服务器<br>pptpd   在pppd拨号的基础上增加pptpd的支持</p><h1 id="2-确定你的内核是否支持mppe"><a href="#2-确定你的内核是否支持mppe" class="headerlink" title="2. 确定你的内核是否支持mppe"></a>2. 确定你的内核是否支持mppe</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe ppp-compress-18 &amp;&amp; echo ok</span><br></pre></td></tr></table></figure><p>如果显示ok，那么恭喜，你的内核已经具备了mppe支持。请到第4部分</p><h1 id="3-升级内核支持mppe"><a href="#3-升级内核支持mppe" class="headerlink" title="3. 升级内核支持mppe"></a>3. 升级内核支持mppe</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://poptop.sourceforge.net/yum/stable/packages/dkms-2.0.17.5-1.noarch.rpm</span><br><span class="line">wget http://poptop.sourceforge.net/yum/stable/packages/kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</span><br></pre></td></tr></table></figure><p>dkms是一个新的软件，能让你在不编译内核的基础上，外挂一些内核的模块。<br>kernel_ppp_mppe就是mppe支持的内核模块了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh dkms-2.0.17.5-1.noarch.rpm</span><br><span class="line">rpm -ivh kernel_ppp_mppe-1.0.2-3dkms.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>以上二个是为CENTOS加载MPPE[MICROSOFT的加密协议] ..不安装的话就不能使用加密连接<br>ok后重起你的系统</p><h1 id="4-安装ppp"><a href="#4-安装ppp" class="headerlink" title="4. 安装ppp"></a>4. 安装ppp</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install ppp</span><br><span class="line">或者</span><br><span class="line">rpm －Uvh  ppp-2.4.2-b3.i386.rpm</span><br></pre></td></tr></table></figure><p><eg></eg></p><h1 id="5-安装pptpd"><a href="#5-安装pptpd" class="headerlink" title="5. 安装pptpd"></a>5. 安装pptpd</h1><p>(1)使用yum安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/Doylenet.repo</span><br><span class="line">    [doylenet]</span><br><span class="line">    name=Doylenet custom repository for CentOS</span><br><span class="line">    baseurl=http://files.doylenet.net/linux/yum/centos/5/i386/doylenet/</span><br><span class="line">    gpgcheck=1</span><br><span class="line">    gpgkey=http://files.doylenet.net/linux/yum/centos/RPM-GPG-KEY-rdoyle</span><br><span class="line">    enabled=1</span><br><span class="line">    # yum update</span><br><span class="line">    # yum install pptpd</span><br></pre></td></tr></table></figure></p><p>(2)rpm下载安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.ntua.gr/pub/net/poptop/pptpd/pptpd-1.3.1/pptpd-1.1.3-4.i386.rpm</span><br><span class="line">rpm －ivh  pptpd-1.1.3-4.i386.rpm</span><br></pre></td></tr></table></figure></p><p>注意32位或者64位版本，否则吃大亏！鄙人就是在64位服务器上装了32位的pptpd，就给搞了很长时间才发现！！ </p><h1 id="6-配置你的pppd和pptpd"><a href="#6-配置你的pppd和pptpd" class="headerlink" title="6. 配置你的pppd和pptpd"></a>6. 配置你的pppd和pptpd</h1><p>/etc/pptpd.conf中需要配置的地方只有几个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option /etc/ppp/options.pptpd</span><br></pre></td></tr></table></figure></p><p>logwtmp 如果日志里出现类似以下问题一定要注释掉logwtmp！！！！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jun 21 15:39:55 center pppd[1374]: /usr/lib/pptpd/pptpd-logwtmp.so: wrong ELF class: ELFCLASS32</span><br><span class="line">Jun 21 15:39:55 center pppd[1374]: Couldn&apos;t load plugin /usr/lib/pptpd/pptpd-logwtmp.so</span><br><span class="line">localip 192.168.9.1</span><br><span class="line">remoteip 192.168.9.11-30</span><br></pre></td></tr></table></figure></p><p>配置pptpd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/etc/ppp/options.pptpd</span><br><span class="line">    name pptpd</span><br><span class="line">    refuse-pap</span><br><span class="line">    refuse-chap</span><br><span class="line">    refuse-mschap</span><br><span class="line">    require-mschap-v2</span><br><span class="line">    require-mppe-128</span><br><span class="line">    proxyarp</span><br><span class="line">    lock</span><br><span class="line">    nobsdcomp</span><br><span class="line">    novj</span><br><span class="line">    novjccomp</span><br><span class="line">    nologfd</span><br><span class="line">    idle 2592000</span><br><span class="line">    ms-dns 8.8.8.8</span><br><span class="line">    ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure></p><p>编辑 /etc/ppp/chap-secrets<br>添加一个测试用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/ppp/chap-secrets</span><br><span class="line"># Secrets for authentication using CHAP</span><br><span class="line"># client     server   secret      IP addresses</span><br><span class="line">test      pptpd    test           *</span><br></pre></td></tr></table></figure></p><p>第一个test是用户，第二个test是密码 ，*表示任意ip<br>配置文件/etc/sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1      修改为“1”内容开启ip转发：</span><br></pre></td></tr></table></figure></p><p>保存、退出后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p><eg></eg></p><h1 id="7-打开防火墙端口"><a href="#7-打开防火墙端口" class="headerlink" title="7. 打开防火墙端口"></a>7. 打开防火墙端口</h1><p>将Linux服务器的1723端口和47端口打开，并打开GRE协议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 1723 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 47 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p gre -j ACCEPT</span><br><span class="line">iptables -A POSTROUTING -t nat -s 192.168.9.0/24 -o eth0 -j MASQUERADE</span><br><span class="line">iptables -A INPUT -p UDP --dport 53 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>这个最蛋疼，开始没注意，能连接上怎么都打不开网页，搞了半天才发现DNS端口没有打开，差点昏死过去！！<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure></p><p><eg></eg></p><h1 id="8-测试pptpd"><a href="#8-测试pptpd" class="headerlink" title="8. 测试pptpd"></a>8. 测试pptpd</h1><p>如果是默认安装，你在任意路径打pptpd就可以了。<br>如果成功，用以下命令看到日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail /var/log/messages</span><br><span class="line">   Feb 10 09:51:46 kdfng pptpd[926]: MGR: Manager process started</span><br><span class="line">   Feb 10 09:51:46 kdfng pptpd[926]: MGR: Maximum of 100 connections available</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
